// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator gen {
  provider = "prisma-client-js"
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Project {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  createdAt        DateTime        @default(now())
  shortDescription String
  description      String
  tags             String[]
  category         ProjectCategory
  images           Image[]
  mainImage        Image
  architects       Architect[]     @relation(fields: [architectIds], references: [id])
  architectIds     String[]        @db.ObjectId
  comments         Comment[]
}

enum ProjectCategory {
  ARCHITECTURE
  OFFICE_DESIGN
  UI_UX
}

model Architect {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  fullname   String
  email      String    @unique
  social     Social
  Projects   Project[] @relation(fields: [projectIds], references: [id])
  projectIds String[]  @db.ObjectId
  image      Image
  Article    Article[]
}

model Article {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  shortDescription String
  description      String
  tags             String[]
  images           Image[]
  mainImage        Image
  createdAt        DateTime  @default(now())
  author           Architect @relation(fields: [architectId], references: [id])
  architectId      String    @db.ObjectId
  comments         Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?  @db.ObjectId
  article   Article? @relation(fields: [articleId], references: [id])
  articleId String?  @db.ObjectId
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  username          String    @unique
  email             String    @unique
  password          String
  gender            Gender
  changedPasswordAt DateTime?
  image             Image?
  Comment           Comment[]
}

enum Gender {
  MALE
  FEMALE
}

type Image {
  title          String
  altDescription String
  link           String
}

type Social {
  linkedIn  String?
  phone     String?
  instagram String?
}
